(* -*- mode: caml -*- *)
(* generated automatically. DO NOT EDIT *)
(* To update this file, you should run `dune runtest; dune promote`. *)

(* test.scm *)
`NamedChar ("alarm")
(* test.scm:1.1-8 *)

(* boolean.scm *)
`Boolean (true)
(* boolean.scm:1.1-3 *)
`Boolean (true)
(* boolean.scm:2.1-6 *)
`Boolean (false)
(* boolean.scm:3.1-3 *)
`Boolean (false)
(* boolean.scm:4.1-7 *)
`Boolean (false)
(* boolean.scm:5.1-7 *)
`Boolean (true)
(* boolean.scm:6.1-6 *)
`LexicalError ("booleans should be terminated by a delimiter"
               (* boolean.scm:7.3 *))
`Integer10 ("123")
(* boolean.scm:7.3-6 *)

(* char.scm *)
`Char (U+0061)
(* char.scm:1.1-4 *)
`Char (U+0041)
(* char.scm:2.1-4 *)
`Char (U+0028)
(* char.scm:3.1-4 *)
`Char (U+0020)
(* char.scm:4.1-4 *)
`NamedChar ("null")
(* char.scm:5.1-7 *)
`NamedChar ("alarm")
(* char.scm:6.1-8 *)
`NamedChar ("backspace")
(* char.scm:7.1-12 *)
`NamedChar ("tab")
(* char.scm:8.1-6 *)
`NamedChar ("return")
(* char.scm:9.1-9 *)
`NamedChar ("newline")
(* char.scm:10.1-10 *)
`NamedChar ("escape")
(* char.scm:11.1-9 *)
`NamedChar ("space")
(* char.scm:12.1-8 *)
`NamedChar ("delete")
(* char.scm:13.1-9 *)
`Char (U+00FF)
(* char.scm:14.1-6 *)
`Char (U+03BB)
(* char.scm:15.1-8 *)
`Char (U+6587)
(* char.scm:16.1-12 *)
`Char (U+03BB)
(* char.scm:17.1-4 *)
`NamedChar ("alarmx")
(* char.scm:18.1-9 *)
`NamedChar ("alarm")
(* char.scm:19.1-8 *)
`Symbol ("x")
(* char.scm:19.9-10 *)
`NamedChar ("Alarm")
(* char.scm:20.1-8 *)
`NamedChar ("alert")
(* char.scm:21.1-8 *)
`Char (U+000A)
(* char.scm:22.1-5 *)
`Char (U+00FF)
(* char.scm:23.1-6 *)
`Char (U+00FF)
(* char.scm:24.1-6 *)
`Char (U+0078)
(* char.scm:25.1-4 *)
`Symbol ("ff")
(* char.scm:25.5-7 *)
`Char (U+0078)
(* char.scm:26.1-4 *)
`OpenL
(* char.scm:26.4-5 *)
`Symbol ("ff")
(* char.scm:26.5-7 *)
`Close
(* char.scm:26.7-8 *)
`Char (U+0078)
(* char.scm:27.1-4 *)
`OpenL
(* char.scm:27.4-5 *)
`Symbol ("x")
(* char.scm:27.5-6 *)
`Close
(* char.scm:27.6-7 *)
`LexicalError ("characters should be terminated by a delimiter"
               (* char.scm:28.4 *))
`Symbol ("x")
(* char.scm:28.4-5 *)
`Char (U+0028)
(* char.scm:29.1-4 *)
`OpenL
(* char.scm:29.4-5 *)
`Symbol ("x")
(* char.scm:29.5-6 *)
`Close
(* char.scm:29.6-7 *)
`LexicalError ("invalid unicode scalar value: 0x00110000"
               (* char.scm:30.1-12 *))
`Char (U+0001)
(* char.scm:31.1-13 *)
`LexicalError ("invalid unicode scalar value: 0xD800"
               (* char.scm:32.1-8 *))

(* integer.scm *)
`Integer2 ("111")
(* integer.scm:1.1-6 *)
`Integer8 ("644")
(* integer.scm:2.1-6 *)
`Integer16 ("cafebabe")
(* integer.scm:3.1-11 *)
`Integer16 ("DeadBeef")
(* integer.scm:4.1-11 *)
`Integer10 ("1024")
(* integer.scm:5.1-5 *)
`Integer10 ("4096")
(* integer.scm:6.1-7 *)
`LexicalError ("unexpected input while reading `Integer16"
               (* integer.scm:8.1-3 *))
`Symbol ("z")
(* integer.scm:8.3-4 *)
`LexicalError ("unexpected input while reading `Integer8"
               (* integer.scm:9.1-3 *))
`Symbol ("z")
(* integer.scm:9.3-4 *)
`LexicalError ("unexpected input while reading `Integer2"
               (* integer.scm:10.1-3 *))
`Symbol ("z")
(* integer.scm:10.3-4 *)
`LexicalError ("unexpected input while reading `Number"
               (* integer.scm:11.1-3 *))
`Symbol ("z")
(* integer.scm:11.3-4 *)

(* string.scm *)
`String ("abc")
(* string.scm:1.1-6 *)
`String ("Abc")
(* string.scm:2.1-10 *)
`String ("A bc")
(* string.scm:3.1-11 *)
`String ("\228\134\188")
(* string.scm:4.1-10 *)
`LexicalError ("unterminated hex_escape in string"
               (* string.scm:5.2-6 *))
`LexicalError ("invalid hex_escape in string"
               (* string.scm:6.1-4 *))
`LexicalError ("unterminated hex_escape in string"
               (* string.scm:7.2-7 *))
`String ("A")
(* string.scm:8.1-14 *)
`String ("\244\143\191\191")
(* string.scm:9.1-14 *)
`LexicalError ("invalid unicode scalar value: 0x00110000"
               (* string.scm:10.2-13 *))
`String ("\001")
(* string.scm:11.1-14 *)
`LexicalError ("invalid unicode scalar value: 0xD800"
               (* string.scm:12.2-9 *))
`String ("A\nbc")
(* string.scm:13.1-14.4 *)
`String ("Abc")
(* string.scm:15.1-16.5 *)
`String ("\"")
(* string.scm:17.1-5 *)
`LexicalError ("unrecognized escape sequence in string: \\|"
               (* string.scm:18.1-4 *))
`LexicalError ("unrecognized escape sequence in string: \\z"
               (* string.scm:19.1-4 *))
`LexicalError ("unclosed string"
               (* string.scm:21.1-22.1 *))

(* symbol.scm *)
`Symbol ("abc")
(* symbol.scm:1.1-6 *)
`Symbol ("Abc")
(* symbol.scm:2.1-10 *)
`Symbol ("A bc")
(* symbol.scm:3.1-11 *)
`Symbol ("\228\134\188")
(* symbol.scm:4.1-10 *)
`LexicalError ("unterminated hex_escape in symbol"
               (* symbol.scm:5.2-6 *))
`LexicalError ("invalid hex_escape in symbol"
               (* symbol.scm:6.1-4 *))
`LexicalError ("unterminated hex_escape in symbol"
               (* symbol.scm:7.2-7 *))
`Symbol ("A")
(* symbol.scm:8.1-14 *)
`Symbol ("\244\143\191\191")
(* symbol.scm:9.1-14 *)
`LexicalError ("invalid unicode scalar value: 0x00110000"
               (* symbol.scm:10.2-13 *))
`Symbol ("\001")
(* symbol.scm:11.1-14 *)
`LexicalError ("invalid unicode scalar value: 0xD800"
               (* symbol.scm:12.2-9 *))
`Symbol ("A\nbc")
(* symbol.scm:13.1-14.4 *)
`Symbol ("Abc")
(* symbol.scm:15.1-16.5 *)
`Symbol ("|")
(* symbol.scm:17.1-5 *)
`LexicalError ("unrecognized escape sequence in symbol: \\\""
               (* symbol.scm:18.1-4 *))
`LexicalError ("unrecognized escape sequence in symbol: \\z"
               (* symbol.scm:19.1-4 *))
`LexicalError ("unclosed symbol"
               (* symbol.scm:21.1-22.1 *))

(* unclosed-comment.scm *)
`LexicalError ("unclosed comment"
               (* unclosed-comment.scm:1.1-2.1 *))

(* unclosed-nested-comment.scm *)
`LexicalError ("unclosed comment"
               (* unclosed-nested-comment.scm:1.1-4.1 *))

(* non-delim.scm *)
`LexicalError ("identifiers should be terminated by a delimiter"
               (* non-delim.scm:1.4 *))
`NamedChar ("newline")
(* non-delim.scm:1.4-13 *)
`LexicalError ("dot should be terminated by a delimiter"
               (* non-delim.scm:2.2 *))
`Boolean (true)
(* non-delim.scm:2.2-4 *)
`LexicalError ("numbers should be terminated by a delimiter"
               (* non-delim.scm:3.4 *))
`Symbol ("zzz")
(* non-delim.scm:3.4-7 *)
`LexicalError ("numbers should be terminated by a delimiter"
               (* non-delim.scm:4.6 *))
`Integer10 ("333")
(* non-delim.scm:4.6-9 *)
`LexicalError ("numbers should be terminated by a delimiter"
               (* non-delim.scm:5.6 *))
`Integer10 ("8")
(* non-delim.scm:5.6-7 *)
`LexicalError ("numbers should be terminated by a delimiter"
               (* non-delim.scm:6.7 *))
`Symbol ("x")
(* non-delim.scm:6.7-8 *)
`LexicalError ("characters should be terminated by a delimiter"
               (* non-delim.scm:7.4 *))
`Symbol ("x")
(* non-delim.scm:7.4-5 *)
`LexicalError ("characters should be terminated by a delimiter"
               (* non-delim.scm:8.8 *))
`Boolean (true)
(* non-delim.scm:8.8-10 *)
`LexicalError ("booleans should be terminated by a delimiter"
               (* non-delim.scm:9.3 *))
`Symbol ("zzz")
(* non-delim.scm:9.3-6 *)
`LexicalError ("booleans should be terminated by a delimiter"
               (* non-delim.scm:10.3 *))
`Symbol ("alze")
(* non-delim.scm:10.3-7 *)

(* comment.scm *)
`LineComment ("-*- require-final-newline: nil -*-\n")
(* comment.scm:1.1-2.1 *)
`BlockComment (" a block comment ")
(* comment.scm:2.1-22 *)
`BlockComment (" a nested #| block |# comment ")
(* comment.scm:3.1-35 *)
`LineComment ("a line comment with a newline\n")
(* comment.scm:4.1-5.1 *)
`LineComment ("a line comment at eof")
(* comment.scm:5.1-23 *)
